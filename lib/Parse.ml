(* Generated by ocaml-tree-sitter. *)

(*
   Disable warning 42:
     "this use of Foo relies on type-directed disambiguation,
     it will not compile with OCaml 4.00 or earlier."
*)
[@@@warning "-42"]

(* Disable warnings against unused variables. *)
[@@@warning "-26-27-32"]

open Tree_sitter_bindings
open Tree_sitter_run

let debug = ref false

type mt = Run.matcher_token

external create_parser :
  unit -> Tree_sitter_API.ts_parser = "octs_create_parser_dockerfile"

let ts_parser = create_parser ()

let parse_source_string ?src_file contents =
  Tree_sitter_parsing.parse_source_string ?src_file ts_parser contents

let parse_source_file src_file =
  Tree_sitter_parsing.parse_source_file ts_parser src_file

let extras = [
  "line_continuation";
]

let children_regexps : (string * Run.exp option) list = [
  "pat_4de4cb9", None;
  "imm_tok_pat_3d340f6", None;
  "pat_1167a92", None;
  "pat_4b81dfc", None;
  "pat_56bd329", None;
  "pat_aa82a08", None;
  "comment", None;
  "pat_660c06c", None;
  "imm_tok_pat_f6e1de8", None;
  "pat_985c208", None;
  "pat_9374c10", None;
  "pat_8713919", None;
  "imm_tok_pat_bcfc287", None;
  "pat_79b8891", None;
  "pat_030af88", None;
  "pat_9818882", None;
  "pat_845d48b", None;
  "pat_f05eb95", None;
  "semgrep_ellipsis", None;
  "pat_4a2f38a", None;
  "pat_fd0037e", None;
  "pat_4128122", None;
  "pat_5eaae97", None;
  "imm_tok_pat_d2727a0", None;
  "pat_5cf3c2c", None;
  "pat_a368b76", None;
  "pat_441cd81", None;
  "required_line_continuation", None;
  "pat_2b37705", None;
  "pat_f2a2f8f", None;
  "imm_tok_pat_24a1611", None;
  "pat_9c0a769", None;
  "non_newline_whitespace", None;
  "pat_808c5a1", None;
  "pat_ed84199", None;
  "pat_1c663f5", None;
  "imm_tok_pat_589b0f8", None;
  "pat_217c202", None;
  "pat_433746d", None;
  "escape_sequence", None;
  "pat_9a14b5c", None;
  "pat_0c7fc22", None;
  "pat_a6040bb", None;
  "variable", None;
  "pat_4fd4a56", None;
  "imm_tok_pat_f43f746", None;
  "pat_239fcac", None;
  "env_key", Some (Token (Name "pat_845d48b"););
  "shell_fragment",
  Some (
    Repeat1 (
      Alt [|
        Token (Name "pat_4b81dfc");
        Token (Name "pat_f05eb95");
      |];
    );
  );
  "expose_port",
  Some (
    Seq [
      Token (Name "pat_217c202");
      Opt (
        Alt [|
          Token (Literal "/tcp");
          Token (Literal "/udp");
        |];
      );
    ];
  );
  "expansion",
  Some (
    Seq [
      Token (Literal "$");
      Alt [|
        Token (Name "variable");
        Seq [
          Token (Literal "{");
          Token (Name "pat_8713919");
          Token (Literal "}");
        ];
      |];
    ];
  );
  "anon_comment",
  Some (
    Seq [
      Token (Literal "#");
      Token (Name "pat_4fd4a56");
    ];
  );
  "cross_build_instruction",
  Some (
    Seq [
      Token (Name "pat_4a2f38a");
      Token (Name "pat_4fd4a56");
    ];
  );
  "maintainer_instruction",
  Some (
    Seq [
      Token (Name "pat_5cf3c2c");
      Token (Name "pat_4fd4a56");
    ];
  );
  "param",
  Some (
    Seq [
      Token (Literal "--");
      Token (Name "imm_tok_pat_f43f746");
      Token (Literal "=");
      Token (Name "imm_tok_pat_f6e1de8");
    ];
  );
  "image_alias",
  Some (
    Repeat1 (
      Alt [|
        Token (Name "pat_9a14b5c");
        Token (Name "expansion");
      |];
    );
  );
  "expose_instruction",
  Some (
    Seq [
      Token (Name "pat_9818882");
      Repeat1 (
        Alt [|
          Token (Name "expose_port");
          Token (Name "expansion");
        |];
      );
    ];
  );
  "user_name_or_group",
  Some (
    Repeat1 (
      Alt [|
        Token (Name "pat_660c06c");
        Token (Name "expansion");
      |];
    );
  );
  "double_quoted_string",
  Some (
    Seq [
      Token (Literal "\"");
      Repeat (
        Alt [|
          Token (Name "imm_tok_pat_589b0f8");
          Token (Name "escape_sequence");
          Token (Name "expansion");
        |];
      );
      Token (Literal "\"");
    ];
  );
  "image_tag",
  Some (
    Seq [
      Token (Literal ":");
      Repeat1 (
        Alt [|
          Token (Name "imm_tok_pat_bcfc287");
          Token (Name "expansion");
        |];
      );
    ];
  );
  "path",
  Some (
    Seq [
      Alt [|
        Token (Name "pat_1167a92");
        Token (Name "expansion");
      |];
      Repeat (
        Alt [|
          Token (Name "pat_0c7fc22");
          Token (Name "expansion");
        |];
      );
    ];
  );
  "image_name",
  Some (
    Repeat1 (
      Alt [|
        Token (Name "pat_2b37705");
        Token (Name "expansion");
      |];
    );
  );
  "unquoted_string",
  Some (
    Repeat1 (
      Alt [|
        Token (Name "imm_tok_pat_24a1611");
        Token (Literal "\\ ");
        Token (Name "expansion");
      |];
    );
  );
  "stopsignal_value",
  Some (
    Repeat1 (
      Alt [|
        Token (Name "pat_441cd81");
        Token (Name "expansion");
      |];
    );
  );
  "image_digest",
  Some (
    Seq [
      Token (Literal "@");
      Repeat1 (
        Alt [|
          Token (Name "imm_tok_pat_d2727a0");
          Token (Name "expansion");
        |];
      );
    ];
  );
  "comment_line",
  Some (
    Seq [
      Token (Name "anon_comment");
      Token (Literal "\n");
    ];
  );
  "user_instruction",
  Some (
    Seq [
      Token (Name "pat_a368b76");
      Token (Name "user_name_or_group");
      Opt (
        Seq [
          Token (Literal ":");
          Token (Name "user_name_or_group");
        ];
      );
    ];
  );
  "string_array",
  Some (
    Seq [
      Token (Literal "[");
      Opt (
        Seq [
          Token (Name "double_quoted_string");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "double_quoted_string");
            ];
          );
        ];
      );
      Token (Literal "]");
    ];
  );
  "workdir_instruction",
  Some (
    Seq [
      Token (Name "pat_a6040bb");
      Token (Name "path");
    ];
  );
  "copy_instruction",
  Some (
    Seq [
      Token (Name "pat_9c0a769");
      Opt (
        Token (Name "param");
      );
      Token (Name "path");
      Token (Name "non_newline_whitespace");
      Token (Name "path");
    ];
  );
  "add_instruction",
  Some (
    Seq [
      Token (Name "pat_ed84199");
      Opt (
        Token (Name "param");
      );
      Token (Name "path");
      Token (Name "non_newline_whitespace");
      Token (Name "path");
    ];
  );
  "env_pair",
  Some (
    Seq [
      Token (Name "env_key");
      Token (Literal "=");
      Alt [|
        Token (Name "double_quoted_string");
        Token (Name "unquoted_string");
      |];
    ];
  );
  "spaced_env_pair",
  Some (
    Seq [
      Token (Name "env_key");
      Token (Name "imm_tok_pat_3d340f6");
      Alt [|
        Token (Name "double_quoted_string");
        Token (Name "unquoted_string");
      |];
    ];
  );
  "label_pair",
  Some (
    Seq [
      Token (Name "pat_4128122");
      Token (Literal "=");
      Alt [|
        Token (Name "double_quoted_string");
        Token (Name "unquoted_string");
      |];
    ];
  );
  "arg_instruction",
  Some (
    Seq [
      Token (Name "pat_985c208");
      Token (Name "pat_4de4cb9");
      Opt (
        Seq [
          Token (Literal "=");
          Alt [|
            Token (Name "double_quoted_string");
            Token (Name "unquoted_string");
          |];
        ];
      );
    ];
  );
  "stopsignal_instruction",
  Some (
    Seq [
      Token (Name "pat_56bd329");
      Token (Name "stopsignal_value");
    ];
  );
  "image_spec",
  Some (
    Seq [
      Token (Name "image_name");
      Opt (
        Token (Name "image_tag");
      );
      Opt (
        Token (Name "image_digest");
      );
    ];
  );
  "shell_command",
  Some (
    Seq [
      Token (Name "shell_fragment");
      Repeat (
        Seq [
          Token (Name "required_line_continuation");
          Repeat (
            Token (Name "comment_line");
          );
          Token (Name "shell_fragment");
        ];
      );
    ];
  );
  "volume_instruction",
  Some (
    Seq [
      Token (Name "pat_1c663f5");
      Alt [|
        Token (Name "string_array");
        Seq [
          Token (Name "path");
          Repeat (
            Seq [
              Token (Name "non_newline_whitespace");
              Token (Name "path");
            ];
          );
        ];
      |];
    ];
  );
  "shell_instruction",
  Some (
    Seq [
      Token (Name "pat_9374c10");
      Token (Name "string_array");
    ];
  );
  "env_instruction",
  Some (
    Seq [
      Token (Name "pat_030af88");
      Alt [|
        Repeat1 (
          Token (Name "env_pair");
        );
        Token (Name "spaced_env_pair");
      |];
    ];
  );
  "label_instruction",
  Some (
    Seq [
      Token (Name "pat_433746d");
      Repeat1 (
        Token (Name "label_pair");
      );
    ];
  );
  "from_instruction",
  Some (
    Seq [
      Token (Name "pat_5eaae97");
      Opt (
        Token (Name "param");
      );
      Token (Name "image_spec");
      Opt (
        Seq [
          Token (Name "pat_79b8891");
          Token (Name "image_alias");
        ];
      );
    ];
  );
  "run_instruction",
  Some (
    Seq [
      Token (Name "pat_f2a2f8f");
      Alt [|
        Token (Name "string_array");
        Token (Name "shell_command");
      |];
    ];
  );
  "cmd_instruction",
  Some (
    Seq [
      Token (Name "pat_239fcac");
      Alt [|
        Token (Name "string_array");
        Token (Name "shell_command");
      |];
    ];
  );
  "entrypoint_instruction",
  Some (
    Seq [
      Token (Name "pat_808c5a1");
      Alt [|
        Token (Name "string_array");
        Token (Name "shell_command");
      |];
    ];
  );
  "healthcheck_instruction",
  Some (
    Seq [
      Token (Name "pat_fd0037e");
      Alt [|
        Token (Literal "NONE");
        Seq [
          Repeat (
            Token (Name "param");
          );
          Token (Name "cmd_instruction");
        ];
      |];
    ];
  );
  "instruction",
  Some (
    Alt [|
      Token (Name "semgrep_ellipsis");
      Alt [|
        Token (Name "from_instruction");
        Token (Name "run_instruction");
        Token (Name "cmd_instruction");
        Token (Name "label_instruction");
        Token (Name "expose_instruction");
        Token (Name "env_instruction");
        Token (Name "add_instruction");
        Token (Name "copy_instruction");
        Token (Name "entrypoint_instruction");
        Token (Name "volume_instruction");
        Token (Name "user_instruction");
        Token (Name "workdir_instruction");
        Token (Name "arg_instruction");
        Token (Name "onbuild_instruction");
        Token (Name "stopsignal_instruction");
        Token (Name "healthcheck_instruction");
        Token (Name "shell_instruction");
        Token (Name "maintainer_instruction");
        Token (Name "cross_build_instruction");
      |];
    |];
  );
  "onbuild_instruction",
  Some (
    Seq [
      Token (Name "pat_aa82a08");
      Token (Name "instruction");
    ];
  );
  "source_file",
  Some (
    Repeat (
      Seq [
        Alt [|
          Token (Name "instruction");
          Token (Name "comment");
        |];
        Token (Literal "\n");
      ];
    );
  );
]

let trans_pat_4de4cb9 ((kind, body) : mt) : CST.pat_4de4cb9 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_pat_3d340f6 ((kind, body) : mt) : CST.imm_tok_pat_3d340f6 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_1167a92 ((kind, body) : mt) : CST.pat_1167a92 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_4b81dfc ((kind, body) : mt) : CST.pat_4b81dfc =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_56bd329 ((kind, body) : mt) : CST.pat_56bd329 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_aa82a08 ((kind, body) : mt) : CST.pat_aa82a08 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_comment ((kind, body) : mt) : CST.comment =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_660c06c ((kind, body) : mt) : CST.pat_660c06c =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_pat_f6e1de8 ((kind, body) : mt) : CST.imm_tok_pat_f6e1de8 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_985c208 ((kind, body) : mt) : CST.pat_985c208 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_9374c10 ((kind, body) : mt) : CST.pat_9374c10 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_8713919 ((kind, body) : mt) : CST.pat_8713919 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_pat_bcfc287 ((kind, body) : mt) : CST.imm_tok_pat_bcfc287 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_79b8891 ((kind, body) : mt) : CST.pat_79b8891 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_030af88 ((kind, body) : mt) : CST.pat_030af88 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_9818882 ((kind, body) : mt) : CST.pat_9818882 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_845d48b ((kind, body) : mt) : CST.pat_845d48b =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_f05eb95 ((kind, body) : mt) : CST.pat_f05eb95 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false


let trans_semgrep_ellipsis ((kind, body) : mt) : CST.semgrep_ellipsis =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_4a2f38a ((kind, body) : mt) : CST.pat_4a2f38a =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_fd0037e ((kind, body) : mt) : CST.pat_fd0037e =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_4128122 ((kind, body) : mt) : CST.pat_4128122 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_5eaae97 ((kind, body) : mt) : CST.pat_5eaae97 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_pat_d2727a0 ((kind, body) : mt) : CST.imm_tok_pat_d2727a0 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_5cf3c2c ((kind, body) : mt) : CST.pat_5cf3c2c =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_a368b76 ((kind, body) : mt) : CST.pat_a368b76 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_441cd81 ((kind, body) : mt) : CST.pat_441cd81 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_required_line_continuation ((kind, body) : mt) : CST.required_line_continuation =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_2b37705 ((kind, body) : mt) : CST.pat_2b37705 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_f2a2f8f ((kind, body) : mt) : CST.pat_f2a2f8f =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_pat_24a1611 ((kind, body) : mt) : CST.imm_tok_pat_24a1611 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_9c0a769 ((kind, body) : mt) : CST.pat_9c0a769 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_non_newline_whitespace ((kind, body) : mt) : CST.non_newline_whitespace =
  match body with
  | Leaf v -> v
  | Children _ -> assert false


let trans_pat_808c5a1 ((kind, body) : mt) : CST.pat_808c5a1 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_ed84199 ((kind, body) : mt) : CST.pat_ed84199 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_1c663f5 ((kind, body) : mt) : CST.pat_1c663f5 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_pat_589b0f8 ((kind, body) : mt) : CST.imm_tok_pat_589b0f8 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_217c202 ((kind, body) : mt) : CST.pat_217c202 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_433746d ((kind, body) : mt) : CST.pat_433746d =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_escape_sequence ((kind, body) : mt) : CST.escape_sequence =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_9a14b5c ((kind, body) : mt) : CST.pat_9a14b5c =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_0c7fc22 ((kind, body) : mt) : CST.pat_0c7fc22 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_a6040bb ((kind, body) : mt) : CST.pat_a6040bb =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_variable ((kind, body) : mt) : CST.variable =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_4fd4a56 ((kind, body) : mt) : CST.pat_4fd4a56 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_pat_f43f746 ((kind, body) : mt) : CST.imm_tok_pat_f43f746 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_239fcac ((kind, body) : mt) : CST.pat_239fcac =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_env_key ((kind, body) : mt) : CST.env_key =
  match body with
  | Children v ->
      trans_pat_845d48b (Run.matcher_token v)
  | Leaf _ -> assert false

let trans_shell_fragment ((kind, body) : mt) : CST.shell_fragment =
  match body with
  | Children v ->
      Run.repeat1
        (fun v ->
          (match v with
          | Alt (0, v) ->
              `Pat_4b81dfc (
                trans_pat_4b81dfc (Run.matcher_token v)
              )
          | Alt (1, v) ->
              `Pat_f05eb95 (
                trans_pat_f05eb95 (Run.matcher_token v)
              )
          | _ -> assert false
          )
        )
        v
  | Leaf _ -> assert false

let trans_expose_port ((kind, body) : mt) : CST.expose_port =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_217c202 (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `SLAS_ce91595 (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `SLAS_c773c8d (
                      Run.trans_token (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_expansion ((kind, body) : mt) : CST.expansion =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Var (
                  trans_variable (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `LCURL_pat_8713919_RCURL (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        trans_pat_8713919 (Run.matcher_token v1),
                        Run.trans_token (Run.matcher_token v2)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_anon_comment ((kind, body) : mt) : CST.anon_comment =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_pat_4fd4a56 (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_cross_build_instruction ((kind, body) : mt) : CST.cross_build_instruction =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_4a2f38a (Run.matcher_token v0),
            trans_pat_4fd4a56 (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_maintainer_instruction ((kind, body) : mt) : CST.maintainer_instruction =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_5cf3c2c (Run.matcher_token v0),
            trans_pat_4fd4a56 (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_param ((kind, body) : mt) : CST.param =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_imm_tok_pat_f43f746 (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            trans_imm_tok_pat_f6e1de8 (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_image_alias ((kind, body) : mt) : CST.image_alias =
  match body with
  | Children v ->
      Run.repeat1
        (fun v ->
          (match v with
          | Alt (0, v) ->
              `Pat_9a14b5c (
                trans_pat_9a14b5c (Run.matcher_token v)
              )
          | Alt (1, v) ->
              `Expa (
                trans_expansion (Run.matcher_token v)
              )
          | _ -> assert false
          )
        )
        v
  | Leaf _ -> assert false

let trans_expose_instruction ((kind, body) : mt) : CST.expose_instruction =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_9818882 (Run.matcher_token v0),
            Run.repeat1
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Expose_port (
                      trans_expose_port (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Expa (
                      trans_expansion (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_user_name_or_group ((kind, body) : mt) : CST.user_name_or_group =
  match body with
  | Children v ->
      Run.repeat1
        (fun v ->
          (match v with
          | Alt (0, v) ->
              `Pat_660c06c (
                trans_pat_660c06c (Run.matcher_token v)
              )
          | Alt (1, v) ->
              `Expa (
                trans_expansion (Run.matcher_token v)
              )
          | _ -> assert false
          )
        )
        v
  | Leaf _ -> assert false

let trans_double_quoted_string ((kind, body) : mt) : CST.double_quoted_string =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Imm_tok_pat_589b0f8 (
                      trans_imm_tok_pat_589b0f8 (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Esc_seq (
                      trans_escape_sequence (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Expa (
                      trans_expansion (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_image_tag ((kind, body) : mt) : CST.image_tag =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat1
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Imm_tok_pat_bcfc287 (
                      trans_imm_tok_pat_bcfc287 (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Expa (
                      trans_expansion (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_path ((kind, body) : mt) : CST.path =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Pat_1167a92 (
                  trans_pat_1167a92 (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Expa (
                  trans_expansion (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Pat_0c7fc22 (
                      trans_pat_0c7fc22 (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Expa (
                      trans_expansion (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_image_name ((kind, body) : mt) : CST.image_name =
  match body with
  | Children v ->
      Run.repeat1
        (fun v ->
          (match v with
          | Alt (0, v) ->
              `Pat_2b37705 (
                trans_pat_2b37705 (Run.matcher_token v)
              )
          | Alt (1, v) ->
              `Expa (
                trans_expansion (Run.matcher_token v)
              )
          | _ -> assert false
          )
        )
        v
  | Leaf _ -> assert false

let trans_unquoted_string ((kind, body) : mt) : CST.unquoted_string =
  match body with
  | Children v ->
      Run.repeat1
        (fun v ->
          (match v with
          | Alt (0, v) ->
              `Imm_tok_pat_24a1611 (
                trans_imm_tok_pat_24a1611 (Run.matcher_token v)
              )
          | Alt (1, v) ->
              `BSLASHSPACE (
                Run.trans_token (Run.matcher_token v)
              )
          | Alt (2, v) ->
              `Expa (
                trans_expansion (Run.matcher_token v)
              )
          | _ -> assert false
          )
        )
        v
  | Leaf _ -> assert false

let trans_stopsignal_value ((kind, body) : mt) : CST.stopsignal_value =
  match body with
  | Children v ->
      Run.repeat1
        (fun v ->
          (match v with
          | Alt (0, v) ->
              `Pat_441cd81 (
                trans_pat_441cd81 (Run.matcher_token v)
              )
          | Alt (1, v) ->
              `Expa (
                trans_expansion (Run.matcher_token v)
              )
          | _ -> assert false
          )
        )
        v
  | Leaf _ -> assert false

let trans_image_digest ((kind, body) : mt) : CST.image_digest =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat1
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Imm_tok_pat_d2727a0 (
                      trans_imm_tok_pat_d2727a0 (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Expa (
                      trans_expansion (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_comment_line ((kind, body) : mt) : CST.comment_line =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_anon_comment (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_user_instruction ((kind, body) : mt) : CST.user_instruction =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pat_a368b76 (Run.matcher_token v0),
            trans_user_name_or_group (Run.matcher_token v1),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_user_name_or_group (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_string_array ((kind, body) : mt) : CST.string_array =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_double_quoted_string (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_double_quoted_string (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_workdir_instruction ((kind, body) : mt) : CST.workdir_instruction =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_a6040bb (Run.matcher_token v0),
            trans_path (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_copy_instruction ((kind, body) : mt) : CST.copy_instruction =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            trans_pat_9c0a769 (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_param (Run.matcher_token v))
              v1
            ,
            trans_path (Run.matcher_token v2),
            trans_non_newline_whitespace (Run.matcher_token v3),
            trans_path (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_add_instruction ((kind, body) : mt) : CST.add_instruction =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            trans_pat_ed84199 (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_param (Run.matcher_token v))
              v1
            ,
            trans_path (Run.matcher_token v2),
            trans_non_newline_whitespace (Run.matcher_token v3),
            trans_path (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_env_pair ((kind, body) : mt) : CST.env_pair =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_env_key (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Double_quoted_str (
                  trans_double_quoted_string (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Unqu_str (
                  trans_unquoted_string (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_spaced_env_pair ((kind, body) : mt) : CST.spaced_env_pair =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_env_key (Run.matcher_token v0),
            trans_imm_tok_pat_3d340f6 (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Double_quoted_str (
                  trans_double_quoted_string (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Unqu_str (
                  trans_unquoted_string (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_label_pair ((kind, body) : mt) : CST.label_pair =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pat_4128122 (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Double_quoted_str (
                  trans_double_quoted_string (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Unqu_str (
                  trans_unquoted_string (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_arg_instruction ((kind, body) : mt) : CST.arg_instruction =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pat_985c208 (Run.matcher_token v0),
            trans_pat_4de4cb9 (Run.matcher_token v1),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Double_quoted_str (
                            trans_double_quoted_string (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Unqu_str (
                            trans_unquoted_string (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_stopsignal_instruction ((kind, body) : mt) : CST.stopsignal_instruction =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_56bd329 (Run.matcher_token v0),
            trans_stopsignal_value (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_image_spec ((kind, body) : mt) : CST.image_spec =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_image_name (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_image_tag (Run.matcher_token v))
              v1
            ,
            Run.opt
              (fun v -> trans_image_digest (Run.matcher_token v))
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_shell_command ((kind, body) : mt) : CST.shell_command =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_shell_fragment (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      trans_required_line_continuation (Run.matcher_token v0),
                      Run.repeat
                        (fun v -> trans_comment_line (Run.matcher_token v))
                        v1
                      ,
                      trans_shell_fragment (Run.matcher_token v2)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_volume_instruction ((kind, body) : mt) : CST.volume_instruction =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_1c663f5 (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Str_array (
                  trans_string_array (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Path_rep_non_nl_whit_path (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        trans_path (Run.matcher_token v0),
                        Run.repeat
                          (fun v ->
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  trans_non_newline_whitespace (Run.matcher_token v0),
                                  trans_path (Run.matcher_token v1)
                                )
                            | _ -> assert false
                            )
                          )
                          v1
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_shell_instruction ((kind, body) : mt) : CST.shell_instruction =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_9374c10 (Run.matcher_token v0),
            trans_string_array (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_env_instruction ((kind, body) : mt) : CST.env_instruction =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_030af88 (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Rep1_env_pair (
                  Run.repeat1
                    (fun v -> trans_env_pair (Run.matcher_token v))
                    v
                )
            | Alt (1, v) ->
                `Spaced_env_pair (
                  trans_spaced_env_pair (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_label_instruction ((kind, body) : mt) : CST.label_instruction =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_433746d (Run.matcher_token v0),
            Run.repeat1
              (fun v -> trans_label_pair (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_from_instruction ((kind, body) : mt) : CST.from_instruction =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            trans_pat_5eaae97 (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_param (Run.matcher_token v))
              v1
            ,
            trans_image_spec (Run.matcher_token v2),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_pat_79b8891 (Run.matcher_token v0),
                      trans_image_alias (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_run_instruction ((kind, body) : mt) : CST.run_instruction =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_f2a2f8f (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Str_array (
                  trans_string_array (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Shell_cmd (
                  trans_shell_command (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_cmd_instruction ((kind, body) : mt) : CST.cmd_instruction =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_239fcac (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Str_array (
                  trans_string_array (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Shell_cmd (
                  trans_shell_command (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_entrypoint_instruction ((kind, body) : mt) : CST.entrypoint_instruction =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_808c5a1 (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Str_array (
                  trans_string_array (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Shell_cmd (
                  trans_shell_command (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_healthcheck_instruction ((kind, body) : mt) : CST.healthcheck_instruction =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_fd0037e (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `NONE (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Rep_param_cmd_inst (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        Run.repeat
                          (fun v -> trans_param (Run.matcher_token v))
                          v0
                        ,
                        trans_cmd_instruction (Run.matcher_token v1)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let rec trans_instruction ((kind, body) : mt) : CST.instruction =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Semg_ellips (
            trans_semgrep_ellipsis (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Choice_from_inst (
            (match v with
            | Alt (0, v) ->
                `From_inst (
                  trans_from_instruction (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Run_inst (
                  trans_run_instruction (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Cmd_inst (
                  trans_cmd_instruction (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Label_inst (
                  trans_label_instruction (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Expose_inst (
                  trans_expose_instruction (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Env_inst (
                  trans_env_instruction (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Add_inst (
                  trans_add_instruction (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Copy_inst (
                  trans_copy_instruction (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `Entr_inst (
                  trans_entrypoint_instruction (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `Volume_inst (
                  trans_volume_instruction (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `User_inst (
                  trans_user_instruction (Run.matcher_token v)
                )
            | Alt (11, v) ->
                `Work_inst (
                  trans_workdir_instruction (Run.matcher_token v)
                )
            | Alt (12, v) ->
                `Arg_inst (
                  trans_arg_instruction (Run.matcher_token v)
                )
            | Alt (13, v) ->
                `Onbu_inst (
                  trans_onbuild_instruction (Run.matcher_token v)
                )
            | Alt (14, v) ->
                `Stop_inst (
                  trans_stopsignal_instruction (Run.matcher_token v)
                )
            | Alt (15, v) ->
                `Heal_inst (
                  trans_healthcheck_instruction (Run.matcher_token v)
                )
            | Alt (16, v) ->
                `Shell_inst (
                  trans_shell_instruction (Run.matcher_token v)
                )
            | Alt (17, v) ->
                `Main_inst (
                  trans_maintainer_instruction (Run.matcher_token v)
                )
            | Alt (18, v) ->
                `Cross_build_inst (
                  trans_cross_build_instruction (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_onbuild_instruction ((kind, body) : mt) : CST.onbuild_instruction =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_aa82a08 (Run.matcher_token v0),
            trans_instruction (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_source_file ((kind, body) : mt) : CST.source_file =
  match body with
  | Children v ->
      Run.repeat
        (fun v ->
          (match v with
          | Seq [v0; v1] ->
              (
                (match v0 with
                | Alt (0, v) ->
                    `Inst (
                      trans_instruction (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Comm (
                      trans_comment (Run.matcher_token v)
                    )
                | _ -> assert false
                )
                ,
                Run.trans_token (Run.matcher_token v1)
              )
          | _ -> assert false
          )
        )
        v
  | Leaf _ -> assert false

let parse_input_tree input_tree =
  let orig_root_node = Tree_sitter_parsing.root input_tree in
  let src = Tree_sitter_parsing.src input_tree in
  let errors = Run.extract_errors src orig_root_node in
  let root_node = Run.remove_extras ~extras orig_root_node in
  let matched_tree = Run.match_tree children_regexps src root_node in
  let opt_program = Option.map trans_source_file matched_tree in
  Parsing_result.create src opt_program errors

let string ?src_file contents =
  let input_tree = parse_source_string ?src_file contents in
  parse_input_tree input_tree

let file src_file =
  let input_tree = parse_source_file src_file in
  parse_input_tree input_tree

